# Standalone Usage

SquirrelJME's Standalone JAR requires at least a Java SE 8 virtual
machine. For most systems, it may be downloaded from the following locations:

 * <https://adoptopenjdk.net/>
 * <http://www.oracle.com/technetwork/java/javase/downloads/index.html>
 * In Debian/Ubuntu, OpenJDK is available in the repository.

Generally SquirrelJME will work best with at least a Java 8 virtual machine.

The JAR file `squirreljme-standalone.jar` may be run by running the following:

 * `java -jar squirreljme-standalone.jar`

When run, it should start the launcher and provide a list of available
programs.

## Command Line Usage

The following may be used at the command line, the format is the same
as `java`. An option within square brackets `[]` are optional, and
any option within parenthesis `()` are required. The usage of SquirrelJME is
in the following format:

 * `java -jar squirreljme-standalone.jar [options]`
   * Start into the launcher. 
 * `java -jar squirreljme-standalone.jar [options] -jar a.jar`
   * Directly launch the given Jar, bypassing the launcher. 
 * `java -jar squirreljme-standalone.jar [options] mainClass [mainArgs|...]`
   * Standard launch into the specific classpath and main arguments.
   * For this option, `-classpath (class:path:...)` may be used

The available options are:

 * `-Xemulator:(vm)`
   * Specifies the backend emulator to use, the supported options are:
     * `hosted` -- Uses the host JVM to run all the software.
     * `springcoat` -- SpringCoat, interpreter written in Java.
     * `nanocoat` -- NanoCoat, interpreter written in C.
 * `-Xsnapshot:(path-to-nps)`
   * Profile the virtual machine and store the profile results into the
     given VisualVM snapshot file.
 * `-Xlibraries:(class:path:...)`
   * Specifies libraries that should be available to the virtual machine
     and the suite management system, note that this is not the same as
     the `-classpath` option as that is for the _current_ application.
 * `-Xjdwp:[hostname]:port`
   * Enable debugging.
   * If `hostname` is specified then the debugger will connect to the
     remote host that is a listening JDWP debugger.
   * Otherwise, if only `port` is specified then the debugger will wait and
     listen on the given port for an incoming connection.
 * `-Xthread:(single|coop|multi|smt)`
   * Sets the threading mode of the virtual machine.
   * `single`/`coop` -- Single threaded using cooperative multitasking.
   * `multi`/`smt` -- Multi threaded using asynchronous multitasking.
 * `-Dsysprop=value`
   * Defines the given system property. 
 * `-classpath (class:path:...)`
   * Specifies the class path to use for the current application, the entries
     must be visible from the library path.
