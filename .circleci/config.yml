# ---------------------------------------------------------------------------
# Multi-Phasic Applications: SquirrelJME
#     Copyright (C) Stephanie Gawroriski <xer@multiphasicapps.net>
#     Copyright (C) Multi-Phasic Applications <multiphasicapps.net>
# ---------------------------------------------------------------------------
# SquirrelJME is under the GNU General Public License v3, or later.
# See license.mkd for licensing and copyright information.
# ---------------------------------------------------------------------------
# DESCRIPTION: CircleCI Build Configuration

version: 2.1
executors:
  buildenv:
    docker:
      - image: circleci/openjdk:8-jdk

orbs:
  win: circleci/windows@2.4.0

jobs:
  ################################## WINDOWS #################################
  build_windows:
    executor:
      name: win/default
      shell: cmd.exe
    steps:
      - checkout
      - run:
          name: Gradle Build and Test
          command: gradlew build test --continue --parallel
          shell: cmd.exe
      - run:
          name: Save test results
          command: |
            mkdir -p /c/users/circleci/test-results/junit
            /usr/bin/find . -type f -regex '.*/build/test-results/.*xml' -exec cp {} /c/users/circleci/test-results/junit/ \;
          when: always
          shell: bash.exe
      - store_test_results:
          path: c:\users\circleci\test-results
      - store_artifacts:
          path: c:\users\circleci\test-results
  ratufacoat_build_windows:
    executor:
      name: win/default
      shell: cmd.exe
    steps:
      - checkout
      - run:
          name: Install required dependencies
          working_directory: ratufacoat
          shell: cmd.exe
          command: choco install cmake.install
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/CMake/bin/cmake.exe" .
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/CMake/bin/cmake.exe" --build .
      - store_artifacts:
          path: ratufacoat\src\Debug\SquirrelJME.exe
          destination: SquirrelJME.exe
  ratufacoat_build_windows_libretro:
    executor:
      name: win/default
      shell: cmd.exe
    steps:
      - checkout
      - run:
          name: Install make
          working_directory: ratufacoat
          shell: cmd.exe
          command: choco install make
      - run:
          name: Install 7-zip
          working_directory: ratufacoat
          shell: cmd.exe
          command: choco install 7zip
      - run:
          name: Download mingw-w64 (32-bit)
          working_directory: ratufacoat
          shell: cmd.exe
          command: curl --retry 2 --connect-timeout 120 -o w32.7z -L https://download.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/8.1.0/threads-win32/dwarf/i686-8.1.0-release-win32-dwarf-rt_v6-rev0.7z
      - run:
          name: Download mingw-w64 (64-bit)
          working_directory: ratufacoat
          shell: cmd.exe
          command: curl --retry 2 --connect-timeout 120 -o w64.7z -L https://download.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-win32/seh/x86_64-8.1.0-release-win32-seh-rt_v6-rev0.7z
      - run:
          name: Extract mingw-w64 (32-bit)
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/7-Zip/7z.exe" x -y w32.7z
      - run:
          name: Extract mingw-w64 (64-bit)
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/7-Zip/7z.exe" x -y w64.7z
      - run:
          name: Compile libRetro (32-bit)
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            export PATH="$PATH:$(pwd)/mingw32/bin" && make -f makefilelibretro platform=windows_x86
      - run:
          name: Compile libRetro (64-bit)
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            export PATH="$PATH:$(pwd)/mingw64/bin" && make -f makefilelibretro platform=windows_x86_64
      - store_artifacts:
          path: ratufacoat\squirreljme_libretro.windows_x86.dll
          destination: squirreljme_libretro.windows_x86.dll
      - store_artifacts:
          path: ratufacoat\squirreljme_libretro.windows_x86_64.dll
          destination: squirreljme_libretro.windows_x86_64.dll
  ################################# MAC OS X #################################
  build_macosx:
    macos:
      xcode: 11.3.0
    steps:
      - checkout
      - run:
          name: Update Brew
          command: brew update
      - run:
          name: Install Gradle and OpenJDK 11
          command: brew install gradle openjdk@11
      - run:
          name: Gradle Build and Test
          command: ./gradlew build test --continue --parallel
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex '.*/build/test-results/.*xml' -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
  ratufacoat_build_macosx:
    macos:
      xcode: 11.3.0
    steps:
      - checkout
      - run:
          name: Update Brew
          command: brew update
      - run:
          name: Install CMake
          command: brew install cmake
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          command: cmake .
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          command: cmake --build .
      - store_artifacts:
          path: ratufacoat/src/SquirrelJME
          destination: SquirrelJME
  ################################### LINUX ##################################
  build_linux:
    executor: buildenv
    steps:
      - checkout
      - run:
          name: Gradle Build and Test
          command: ./gradlew build test --continue --parallel
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex '.*/build/test-results/.*xml' -exec cp {} ~/test-results/junit/ \;
          when: always
      - persist_to_workspace:
          root: .
          paths:
            - '.gradle/*'
            - 'build/*'
            - 'buildSrc/.gradle/*'
            - 'buildSrc/build/*'
            - 'emulators/build/*'
            - 'emulators/*/build/*'
            - 'modules/build/*'
            - 'modules/*/build/*'
            - 'tools/build/*'
            - 'tools/*/build/*'
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
  ratufacoat_build_linux:
    executor: buildenv
    steps:
      - checkout
      - run:
          name: Install required dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get install -y cmake build-essential
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          command: cmake .
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          command: cmake --build .
      - store_artifacts:
          path: ratufacoat/src/SquirrelJME
          destination: SquirrelJME
  construct_testjars:
    executor: buildenv
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Constuct Test JARs
          command: ./gradlew testJar --continue --parallel
      - persist_to_workspace:
          root: .
          paths:
            - '.gradle/*'
            - 'build/*'
            - 'buildSrc/.gradle/*'
            - 'buildSrc/build/*'
            - 'emulators/build/*'
            - 'emulators/*/build/*'
            - 'modules/build/*'
            - 'modules/*/build/*'
            - 'tools/build/*'
            - 'tools/*/build/*'
  test_springcoat:
    executor: buildenv
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: SpringCoat Tests
          command: timeout --foreground 15m ./gradlew testSpringCoat --console plain --continue --parallel
          no_output_timeout: 15m
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex '.*/springcoat/junit-reports/.*xml' -exec cp {} ~/test-results/junit/ \;
          when: always
      - run:
          name: Save snapshots
          command: |
            mkdir -p ~/test-results/nps/
            find . -type f -regex '.*/springcoat/nps/.*nps' -exec cp {} ~/test-results/nps/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - store_artifacts:
          path: ~/test-results/nps
  test_summercoat:
    executor: buildenv
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: SummerCoat Tests
          command: |
            if ! timeout --foreground 1s ./gradlew testSummerCoat --console plain --continue --parallel
            then
              echo "SummerCoat testing failed, ignoring..." 1>&2
            fi
          no_output_timeout: 1m
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex '.*/summercoat/junit-reports/.*xml' -exec cp {} ~/test-results/junit/ \;
          when: always
      - run:
          name: Save snapshots
          command: |
            mkdir -p ~/test-results/nps/
            find . -type f -regex '.*/summercoat/nps/.*nps' -exec cp {} ~/test-results/nps/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - store_artifacts:
          path: ~/test-results/nps

workflows:
  version: 2
  tests:
    jobs:
      - build_windows
      - build_linux
      - build_macosx
      - construct_testjars:
          requires:
            - build_linux
      - test_springcoat:
          requires:
            - construct_testjars
      - test_summercoat:
          requires:
            - construct_testjars
      - ratufacoat_build_windows:
          requires:
            - build_windows
      - ratufacoat_build_windows_libretro:
          requires:
            - ratufacoat_build_windows
      - ratufacoat_build_linux:
          requires:
            - build_linux
      - ratufacoat_build_macosx:
          requires:
            - build_macosx
