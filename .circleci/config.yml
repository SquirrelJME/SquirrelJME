# ---------------------------------------------------------------------------
# Multi-Phasic Applications: SquirrelJME
#     Copyright (C) Stephanie Gawroriski <xer@multiphasicapps.net>
#     Copyright (C) Multi-Phasic Applications <multiphasicapps.net>
# ---------------------------------------------------------------------------
# SquirrelJME is under the GNU General Public License v3, or later.
# See license.mkd for licensing and copyright information.
# ---------------------------------------------------------------------------
# DESCRIPTION: CircleCI Build Configuration
# SourceForge: squirreljme@frs.sourceforge.net
# SourceForge Root: /home/frs/project/squirreljme/AutoBuild/
# CircleCI Reference: https://circleci.com/docs/2.0/env-vars/

version: 2.1

executors:
  build-on-linux-amd64:
    docker:
      - image: cimg/openjdk:11.0
    resource_class: medium
    environment:
      # Allow Gradle to be fully cached
      GRADLE_USER_HOME: ${CIRCLE_WORKING_DIRECTORY}/.gradle/home
  build-on-linux-arm64:
    docker:
      - image: cimg/ubuntu-2004:current
    resource_class: arm.medium
    environment:
      # Allow Gradle to be fully cached
      GRADLE_USER_HOME: ${CIRCLE_WORKING_DIRECTORY}/.gradle/home
  build-on-linux-ratufacoat:
    docker:
      - image: debian:bullseye-backports
    resource_class: medium

# This is in the documentation but does not actually work, new feature?
#  build-on-windows:
#    windows:
#      name: win/default
#      shell: cmd.exe
#    resource_class: medium
#    environment:
#      # Use a reduced amount of memory to all the VMs so that it does not
#      # try grabbing all the memory that is available to the system.
#      JAVA_OPTS: -Xmx3g

  build-on-macos:
    macos:
      xcode: 13.2.1
    resource_class: macos.x86.medium.gen2
    environment:
      # Do not auto-update brew as this takes forever, and we really just want
      # a single package
      HOMEBREW_NO_AUTO_UPDATE: 1

      # Do not auto-clean brew, this wastes time and everything will be thrown
      # out when the container finishes anyway
      HOMEBREW_CLEANUP_MAX_AGE_DAYS: 730

      # Do not send analytics
      HOMEBREW_NO_ANALYTICS: 1

      # Do not clean up after installation
      HOMEBREW_NO_INSTALL_CLEANUP: 1

  build-on-macos-m1:
    machine: true
    resource_class: squirreljme/squirreljme-macos-m1

orbs:
  win: circleci/windows@2.4.0

# Parameters to simplify commands
parameters:
  # Options to be used for any Gradle command, is faster this way
  standard-gradle-options:
    type: string
    default: --console plain --continue --parallel --no-daemon --stacktrace

  # Standard build for systems
  standard-build-options:
    type: string
    default: build testHosted -x testSpringCoat -x testSpringCoatRelease -x testSpringCoatDebug -x javadoc -x javadocJar -x sourcesJar -x markdownJavaDoc

# Commands that are used by almost everything
commands:
  # Save Gradle cache and such so subsequent builds are faster
  persist-gradle:
    steps:
      - persist_to_workspace:
          root: .
          paths:
            - '.gradle/*'
            - 'build/*'
            - '*/.gradle/*'
            - '*/build/*'
            - '*/*/build/*'

  # Saving of test results, since this is duplicated for many OSes
  save-test-results:
    parameters:
      where:
        type: string
      os:
        type: string
      vm:
        type: string
      shell:
        type: string
        default: "/bin/bash"
      home:
        type: string
        default: ./.no-persist/
      find:
        type: string
        default: find
      store-home:
        type: string
        default: ./.no-persist/
    steps:
      - run:
          shell: <<parameters.shell>>
          name: Save test results
          command: |
            mkdir -p "<<parameters.home>>/test-results/junit-<<parameters.os>>-<<parameters.where>>/"
            <<parameters.find>> . -type f -regex '.*/'"<<parameters.where>>"'/junit/.*\.xml' -exec cp {} "<<parameters.home>>/test-results/junit-<<parameters.os>>-<<parameters.where>>/" \;
          when: always
      - run:
          shell: <<parameters.shell>>
          name: Save test results
          command: |
            mkdir -p "<<parameters.home>>/test-results/csv-<<parameters.os>>-<<parameters.where>>/"
            <<parameters.find>> . -type f -regex '.*/'"<<parameters.where>>"'/csv/.*\.csv' -exec cp {} "<<parameters.home>>/test-results/csv-<<parameters.os>>-<<parameters.where>>/" \;
          when: always
      - run:
          shell: <<parameters.shell>>
          name: Save snapshots
          command: |
            mkdir -p "<<parameters.home>>/test-results/nps-<<parameters.vm>>-<<parameters.os>>-<<parameters.where>>/"
            <<parameters.find>> . -type f -regex '.*/'"<<parameters.where>>"'/nps/.*\.nps' -exec cp {} "<<parameters.home>>/test-results/nps-<<parameters.vm>>-<<parameters.os>>-<<parameters.where>>/" \;
          when: always
      - store_test_results:
          path: <<parameters.store-home>>/test-results
      - store_artifacts:
          path: <<parameters.store-home>>/test-results

  # Install standard packages in Debian/Ubuntu
  linux-install-required:
    steps:
      - run:
          name: Update package lists
          command: sudo apt-get update -y
      - run:
          name: Install required dependencies
          command: sudo apt-get install -y --no-install-recommends cmake build-essential curl wget openjdk-11-jdk gcc g++ make

  # Cross architecture building, since it is all the same
  ratufacoat_cross_arch_template:
    description: Performs common cross-archicture testing of RatufaCoat.
    parameters:
      debian-packages:
        type: string
      qemu-binary:
        type: string
      gcc-binary:
        type: string
      gpp-binary:
        type: string
      ar-binary:
        type: string
      ld-binary:
        type: string
    steps:
      - checkout
      - run:
          name: Install required dependencies
          command: |
            apt-get update -y
            apt-get install -y build-essential python3 git cmake qemu-user-static <<parameters.debian-packages>>
      - attach_workspace:
          at: .
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          command: cmake -DSQUIRRELJME_TEST_WRAPPER="$(which <<parameters.qemu-binary>>)" -DCMAKE_C_COMPILER="$(which <<parameters.gcc-binary>>)" -DCMAKE_CXX_COMPILER="$(which <<parameters.gpp-binary>>)" -DCMAKE_AR="$(which <<parameters.ar-binary>>)" -DCMAKE_LINKER="$(which <<parameters.ld-binary>>)" .
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          command: cmake --build .
      - run:
          name: Test CMake Build
          working_directory: ratufacoat
          command: ctest --extra-verbose -T Test .
      - run:
          name: Convert CTest to JUnit XML
          command: python3 ctest-to-junit.py < Testing/*/Test.xml
          working_directory: ratufacoat
          when: always
      - run:
          name: Save test results
          working_directory: ratufacoat
          command: |
            mkdir -p ~/test-results/junit-linux/
            find . -type f -regex '.*/build/junit/.*\.xml' -exec cp {} ~/test-results/junit-linux/ \;
          when: always
      - store_test_results:
          path: ~/test-results

# Standard Build Jobs
jobs:
  ################################## WINDOWS #################################
  build_windows:
    executor:
      name: win/default
      shell: cmd.exe
      size: medium
    environment:
      # Use a reduced amount of memory to all the VMs so that it does not
      # try grabbing all the memory that is available to the system.
      JAVA_OPTS: -Xmx3g
    steps:
      - checkout
      - run:
          shell: cmd.exe
          name: Gradle Build and Test
          # According to documentation, Gradle on Windows has trouble and tries
          # to make way too many workers which causes extreme resource.
          # contention --max-workers=2
          command: gradlew <<pipeline.parameters.standard-build-options>> <<pipeline.parameters.standard-gradle-options>>
          no_output_timeout: 30m
      - persist-gradle
      - save-test-results:
          where: "vm-test-hosted-debug"
          os: "windows"
          vm: "hosted"
          shell: bash.exe
          find: /usr/bin/find
          home: "/c/users/circleci/"
          store-home: "c:/users/circleci/"
      - save-test-results:
          where: "vm-test-hosted-release"
          os: "windows"
          vm: "hosted"
          shell: bash.exe
          find: /usr/bin/find
          home: "/c/users/circleci/"
          store-home: "c:/users/circleci/"

  build_windows_standalone:
    executor:
      name: win/default
      shell: cmd.exe
      size: medium
    environment:
      # Use a reduced amount of memory to all the VMs so that it does not
      # try grabbing all the memory that is available to the system.
      JAVA_OPTS: -Xmx3g
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          shell: bash.exe
          name: Construct Standalone
          command: ./gradlew :emulators:standalone:shadowJar <<pipeline.parameters.standard-gradle-options >>
      - run:
          shell: bash.exe
          name: Remove distracting JAR, if any
          command: rm emulators/standalone/build/libs/standalone-*.jar
      - store_artifacts:
          path: emulators/standalone/build/libs/
          destination: .

  # Microsoft Visual Studio 32-bit
  ratufacoat_build_windows_msvc32:
    executor:
      name: win/default
      shell: cmd.exe
      size: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install required dependencies
          working_directory: ratufacoat
          shell: cmd.exe
          command: choco install cmake.install
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/CMake/bin/cmake.exe" . \
                -G "Visual Studio 16 2019" -A Win32 \
                -DCMAKE_BUILD_TYPE=Release
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/CMake/bin/cmake.exe" --build . --config Release
      - run:
          name: Test CMake Build
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/CMake/bin/ctest.exe" --extra-verbose -T Test \
                -C Release .
      - run:
          shell: bash.exe
          name: Convert CTest to JUnit XML
          command: python ctest-to-junit.py < Testing/*/Test.xml
          working_directory: ratufacoat
          when: always
      - run:
          shell: bash.exe
          name: Save test results
          working_directory: ratufacoat
          command: |
            mkdir -p /c/users/circleci/test-results/junit-windows
            /usr/bin/find . -type f -regex '.*/build/junit/.*\.xml' -exec cp {} /c/users/circleci/test-results/junit-windows/ \;
          when: always
      - store_test_results:
          path: c:\users\circleci\test-results
      - store_artifacts:
          path: ratufacoat\src\sdl2\Debug\SquirrelJME.exe
          destination: SquirrelJME.exe

  # Microsoft Visual Studio 64-bit
  ratufacoat_build_windows_msvc64:
    executor:
      name: win/default
      shell: cmd.exe
      size: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install required dependencies
          working_directory: ratufacoat
          shell: cmd.exe
          command: choco install cmake.install
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/CMake/bin/cmake.exe" . \
                -G "Visual Studio 16 2019" -A x64 \
                -DCMAKE_BUILD_TYPE=Release
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/CMake/bin/cmake.exe" --build . --config Release
      - run:
          name: Test CMake Build
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/CMake/bin/ctest.exe" --extra-verbose -T Test \
                -C Release .
      - run:
          shell: bash.exe
          name: Convert CTest to JUnit XML
          command: python ctest-to-junit.py < Testing/*/Test.xml
          working_directory: ratufacoat
          when: always
      - run:
          shell: bash.exe
          name: Save test results
          working_directory: ratufacoat
          command: |
            mkdir -p /c/users/circleci/test-results/junit-windows
            /usr/bin/find . -type f -regex '.*/build/junit/.*\.xml' -exec cp {} /c/users/circleci/test-results/junit-windows/ \;
          when: always
      - store_test_results:
          path: c:\users\circleci\test-results
      - store_artifacts:
          path: ratufacoat\src\sdl2\Debug\SquirrelJME.exe
          destination: SquirrelJME.exe

  ################################# MAC OS X #################################
  build_macosx:
    executor: build-on-macos
    steps:
      - checkout
      - run:
          # Only OpenJDK is required, Gradle always uses Gradle wrapper so
          # we do not need that
          name: Install OpenJDK 11
          command: brew install openjdk@11 coreutils
      - run:
          name: Gradle Build and Test
          command: timeout --foreground 30m ./gradlew <<pipeline.parameters.standard-build-options>> <<pipeline.parameters.standard-gradle-options>>
          no_output_timeout: 30m
      - persist-gradle
      - save-test-results:
          where: "vm-test-hosted-debug"
          os: "macosx"
          vm: "hosted"
      - save-test-results:
          where: "vm-test-hosted-release"
          os: "macosx"
          vm: "hosted"
  build_macosx_m1:
    executor: build-on-macos-m1
    steps:
      - checkout
      - run:
          name: Gradle Build and Test
          command: timeout --foreground 30m ./gradlew <<pipeline.parameters.standard-build-options>> <<pipeline.parameters.standard-gradle-options>>
          no_output_timeout: 30m
      - persist-gradle
      - save-test-results:
          where: "vm-test-hosted-debug"
          os: "macosx-m1"
          vm: "hosted"
      - save-test-results:
          where: "vm-test-hosted-release"
          os: "macosx-m1"
          vm: "hosted"

  build_macosx_standalone:
    executor: build-on-macos
    steps:
      - checkout
      - run:
          # Only OpenJDK is required, Gradle always uses Gradle wrapper so
          # we do not need that
          name: Install OpenJDK 11
          command: brew install openjdk@11 coreutils
      - attach_workspace:
          at: .
      - run:
          name: Construct Standalone
          command: ./gradlew :emulators:standalone:shadowJar <<pipeline.parameters.standard-gradle-options>>
      - run:
          name: Remove distracting JAR, if any
          command: rm emulators/standalone/build/libs/standalone-*.jar
      - store_artifacts:
          path: emulators/standalone/build/libs/
          destination: .

  build_macosx_m1_standalone:
    executor: build-on-macos-m1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Construct Standalone
          command: ./gradlew :emulators:standalone:shadowJar <<pipeline.parameters.standard-gradle-options>>
      - run:
          name: Remove distracting JAR, if any
          command: rm emulators/standalone/build/libs/standalone-*.jar
      - store_artifacts:
          path: emulators/standalone/build/libs/
          destination: .

  ratufacoat_build_macosx:
    executor: build-on-macos
    steps:
      - checkout
      - run:
          name: Install CMake
          command: brew install cmake coreutils
      - attach_workspace:
          at: .
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          command: cmake .
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          command: cmake --build .
      - run:
          name: Test CMake Build
          working_directory: ratufacoat
          command: ctest --extra-verbose -T Test .
      - run:
          name: Convert CTest to JUnit XML
          command: python3 ctest-to-junit.py < Testing/*/Test.xml
          working_directory: ratufacoat
          when: always
      - run:
          name: Save test results
          working_directory: ratufacoat
          command: |
            mkdir -p ~/test-results/junit-macosx/
            find . -type f -regex '.*/build/junit/.*\.xml' -exec cp {} ~/test-results/junit-macosx/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ratufacoat/src/sdl2/SquirrelJME
          destination: SquirrelJME

  ratufacoat_build_macosx_m1:
    executor: build-on-macos-m1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          command: cmake .
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          command: cmake --build .
      - run:
          name: Test CMake Build
          working_directory: ratufacoat
          command: ctest --extra-verbose -T Test .
      - run:
          name: Convert CTest to JUnit XML
          command: python3 ctest-to-junit.py < Testing/*/Test.xml
          working_directory: ratufacoat
          when: always
      - run:
          name: Save test results
          working_directory: ratufacoat
          command: |
            mkdir -p ~/test-results/junit-macosx/
            find . -type f -regex '.*/build/junit/.*\.xml' -exec cp {} ~/test-results/junit-macosx/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ratufacoat/src/sdl2/SquirrelJME
          destination: SquirrelJME

  ################################### LINUX ##################################
  build_linux_amd64:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - run:
          name: Gradle Build and Test
          command: timeout --foreground 30m ./gradlew <<pipeline.parameters.standard-build-options>> <<pipeline.parameters.standard-gradle-options>>
          no_output_timeout: 30m
      - save-test-results:
          where: "vm-test-hosted-debug"
          os: "linux-amd64"
          vm: "hosted"
      - save-test-results:
          where: "vm-test-hosted-release"
          os: "linux-amd64"
          vm: "hosted"
      - persist-gradle
  build_linux_amd64_standalone:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: Construct Standalone
          command: ./gradlew :emulators:standalone:shadowJar <<pipeline.parameters.standard-gradle-options>>
      - run:
          name: Remove distracting JAR, if any
          command: rm emulators/standalone/build/libs/standalone-*.jar
      - store_artifacts:
          path: emulators/standalone/build/libs/
          destination: .

  build_linux_arm64:
    executor: build-on-linux-arm64
    steps:
      - checkout
      - linux-install-required
      - run:
          name: Gradle Build and Test
          command: timeout --foreground 30m ./gradlew <<pipeline.parameters.standard-build-options>> <<pipeline.parameters.standard-gradle-options>>
          no_output_timeout: 30m
      - save-test-results:
          where: "vm-test-hosted-debug"
          os: "linux-arm64"
          vm: "hosted"
      - save-test-results:
          where: "vm-test-hosted-release"
          os: "linux-arm64"
          vm: "hosted"
      - persist-gradle
  build_linux_arm64_standalone:
    executor: build-on-linux-arm64
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: Construct Standalone
          command: ./gradlew :emulators:standalone:shadowJar <<pipeline.parameters.standard-gradle-options>>
      - run:
          name: Remove distracting JAR, if any
          command: rm emulators/standalone/build/libs/standalone-*.jar
      - store_artifacts:
          path: emulators/standalone/build/libs/
          destination: .

  ### OSS SonaType Nexus
  sonatype_publish:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: Publish to OSS SonaType
          command: ./gradlew publishMavenPublicationToMavenRepository <<pipeline.parameters.standard-gradle-options>> || circleci-agent step halt

  ### RatufaCoat
  ratufacoat_build_linux:
    executor: build-on-linux-ratufacoat
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          command: cmake .
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          command: cmake --build .
      - run:
          name: Test CMake Build
          working_directory: ratufacoat
          command: ctest --extra-verbose -T Test .
      - run:
          name: Convert CTest to JUnit XML
          command: python3 ctest-to-junit.py < Testing/*/Test.xml
          working_directory: ratufacoat
          when: always
      - run:
          name: Save test results
          working_directory: ratufacoat
          command: |
            mkdir -p ~/test-results/junit-linux/
            find . -type f -regex '.*/build/junit/.*\.xml' -exec cp {} ~/test-results/junit-linux/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ratufacoat/src/sdl2/SquirrelJME
          destination: SquirrelJME

  ### RatufaCoat (EmScripten/Browser)
  ratufacoat_build_emscripten:
    executor: build-on-linux-ratufacoat
    steps:
      - checkout
      - run:
          name: Install required dependencies
          command: |
            apt-get update -y
            apt-get install -y build-essential python3 git valgrind cmake emscripten
      - attach_workspace:
          at: .
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          command: emcmake cmake -G "Unix Makefiles" . && emcmake cmake -G "Unix Makefiles" .
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          command: emmake make
      - run:
          name: Where are all the files?
          working_directory: ratufacoat
          command: find -type f
          when: always
      - store_artifacts:
          path: ratufacoat/src/sdl2/SquirrelJME.html
          destination: SquirrelJME.html
      - store_artifacts:
          path: ratufacoat/src/sdl2/SquirrelJME.js
          destination: SquirrelJME.js
      - store_artifacts:
          path: ratufacoat/src/sdl2/SquirrelJME.wasm
          destination: SquirrelJME.wasm

  ### RatufaCoat (m68k, Cross Arch Testing)
  ratufacoat_build_linux_m68k:
    executor: build-on-linux-ratufacoat
    steps:
      - ratufacoat_cross_arch_template:
          debian-packages: gcc-m68k-linux-gnu g++-m68k-linux-gnu binutils-m68k-linux-gnu
          qemu-binary: qemu-m68k-static
          gcc-binary: m68k-linux-gnu-gcc
          gpp-binary: m68k-linux-gnu-g++
          ar-binary: m68k-linux-gnu-ar
          ld-binary: m68k-linux-gnu-ld

  ### RatufaCoat (MIPS, Cross Arch Testing)
  ratufacoat_build_linux_mips:
    executor: build-on-linux-ratufacoat
    steps:
      - ratufacoat_cross_arch_template:
          debian-packages: gcc-mips-linux-gnu g++-mips-linux-gnu binutils-mips-linux-gnu
          qemu-binary: qemu-mips-static
          gcc-binary: mips-linux-gnu-gcc
          gpp-binary: mips-linux-gnu-g++
          ar-binary: mips-linux-gnu-ar
          ld-binary: mips-linux-gnu-ld

  ### RatufaCoat (MIPS 64-bit, Cross Arch Testing)
  ratufacoat_build_linux_mips64:
    executor: build-on-linux-ratufacoat
    steps:
      - ratufacoat_cross_arch_template:
          debian-packages: gcc-mips64-linux-gnu g++-mips64-linux-gnu binutils-mips64-linux-gnu
          qemu-binary: qemu-mips64-static
          gcc-binary: mips64-linux-gnu-gcc
          gpp-binary: mips64-linux-gnu-g++
          ar-binary: mips64-linux-gnu-ar
          ld-binary: mips64-linux-gnu-ld

  ### RatufaCoat (PowerPC, Cross Arch Testing)
  ratufacoat_build_linux_powerpc:
    executor: build-on-linux-ratufacoat
    steps:
      - ratufacoat_cross_arch_template:
          debian-packages: gcc-powerpc-linux-gnu g++-powerpc-linux-gnu binutils-powerpc-linux-gnu
          qemu-binary: qemu-ppc-static
          gcc-binary: powerpc-linux-gnu-gcc
          gpp-binary: powerpc-linux-gnu-g++
          ar-binary: powerpc-linux-gnu-ar
          ld-binary: powerpc-linux-gnu-ld

  ### RatufaCoat (PowerPC 64-bit, Cross Arch Testing)
  ratufacoat_build_linux_powerpc64:
    executor: build-on-linux-ratufacoat
    steps:
      - ratufacoat_cross_arch_template:
          debian-packages: gcc-powerpc64-linux-gnu g++-powerpc64-linux-gnu binutils-powerpc64-linux-gnu
          qemu-binary: qemu-ppc64-static
          gcc-binary: powerpc64-linux-gnu-gcc
          gpp-binary: powerpc64-linux-gnu-g++
          ar-binary: powerpc64-linux-gnu-ar
          ld-binary: powerpc64-linux-gnu-ld

  ### RatufaCoat (SH4, Cross Arch Testing)
  ratufacoat_build_linux_sh4:
    executor: build-on-linux-ratufacoat
    steps:
      - ratufacoat_cross_arch_template:
          debian-packages: gcc-sh4-linux-gnu g++-sh4-linux-gnu binutils-sh4-linux-gnu
          qemu-binary: qemu-sh4-static
          gcc-binary: sh4-linux-gnu-gcc
          gpp-binary: sh4-linux-gnu-g++
          ar-binary: sh4-linux-gnu-ar
          ld-binary: sh4-linux-gnu-ld

  ### RatufaCoat (SPARC 64-bit, Cross Arch Testing)
  ratufacoat_build_linux_sparc64:
    executor: build-on-linux-ratufacoat
    steps:
      - ratufacoat_cross_arch_template:
          debian-packages: gcc-sparc64-linux-gnu g++-sparc64-linux-gnu binutils-sparc64-linux-gnu
          qemu-binary: qemu-sparc64-static
          gcc-binary: sparc64-linux-gnu-gcc
          gpp-binary: sparc64-linux-gnu-g++
          ar-binary: sparc64-linux-gnu-ar
          ld-binary: sparc64-linux-gnu-ld

  ### SpringCoat
  test_springcoat_debug:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: SpringCoat Tests
          command: timeout --foreground 30m ./gradlew testSpringCoatDebug <<pipeline.parameters.standard-gradle-options>>
          no_output_timeout: 30m
      - save-test-results:
          where: "vm-test-springcoat-debug"
          os: "linux"
          vm: "springcoat"
  test_springcoat_release:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: SpringCoat Tests
          command: timeout --foreground 30m ./gradlew testSpringCoatRelease <<pipeline.parameters.standard-gradle-options>>
          no_output_timeout: 30m
      - save-test-results:
          where: "vm-test-springcoat-release"
          os: "linux"
          vm: "springcoat"

  test_summercoat:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: SummerCoat Tests
          command: timeout --foreground 30m ./gradlew testSummerCoat <<pipeline.parameters.standard-gradle-options>>
          no_output_timeout: 30m
      - save-test-results:
          where: "vm-test-summercoat-debug"
          os: "linux"
          vm: "summercoat"
      - save-test-results:
          where: "vm-test-summercoat-release"
          os: "linux"
          vm: "summercoat"

  ################################### USERS ##################################
  export_user_guide:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - run:
          name: Checkout Wiki
          command: git clone git@github.com:SquirrelJME/SquirrelJME.wiki.git /tmp/wiki
      - run:
          name: Wikify
          command: .circleci/squirreljme-wikify-user-guide.sh "$(pwd)" "/tmp/wiki"
      - run:
          name: Update Git User
          command: |
            cd "/tmp/wiki" && git config user.name "SquirrelJME Automation" && git config user.email "xerthesquirrel+squirreljme@gmail.com"
      - run:
          name: Commit changes
          command: |
            cd "/tmp/wiki" && git commit -m "Synchronize User-Guide" || echo "Ignoring commit."
      - add_ssh_keys:
          fingerprints:
            - "26:b8:ae:4d:53:64:4c:6a:59:3d:a6:60:44:90:9d:6c"
      - run:
          name: Push changes
          command: |
            cd "/tmp/wiki" && git push

  ################################ CONSTRUCTION ###############################
  # Runs the `testJar` task so any operations following this will run faster
  # when they need to use these JARs
  construct_testJars:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: Construct Test JARs
          command: ./gradlew testJar <<pipeline.parameters.standard-gradle-options>>
      - persist-gradle

  # Constructs the ROM fragment libraries for SummerCoat, since they are used
  # for general ROM construction
  construct_libSummerCoat:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: Construct SummerCoat Libraries
          command: ./gradlew libSummerCoat <<pipeline.parameters.standard-gradle-options>>
      - persist-gradle

  # All the tests so that they can run from within SummerCoat
  construct_libTestSummerCoat:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: Construct Test SummerCoat Libraries
          command: ./gradlew libTestSummerCoat <<pipeline.parameters.standard-gradle-options>>
      - persist-gradle

  # Constructs the standard SummerCoat ROM, could be uploaded later
  construct_romSummerCoat:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: Construct SummerCoat ROM
          command: ./gradlew romSummerCoat <<pipeline.parameters.standard-gradle-options>>
      - persist-gradle

  # Constructs the test SummerCoat ROM, could be uploaded later, this is so
  # that any RatufaCoats have an actual ROM that can be tested to ensure that
  # it properly works.
  construct_romTestSummerCoat:
    executor: build-on-linux-amd64
    steps:
      - checkout
      - linux-install-required
      - attach_workspace:
          at: .
      - run:
          name: Construct Test SummerCoat ROM
          command: ./gradlew romTestSummerCoat <<pipeline.parameters.standard-gradle-options>>
      - persist-gradle

  # Construct the built-in ROM for RatufaCoat
  construct_builtInRatufaCoatRom:
    executor: build-on-linux-amd64
    steps:
      - run:
          name: TODO
          command: false

  # Construct release ROM for RetroArch
  construct_builtInRatufaCoatRomRelease:
    executor: build-on-linux-amd64
    steps:
      - run:
          name: TODO
          command: false

  # Poke RetroArch for building the cores
  poke_RetroArch:
    executor: build-on-linux-amd64
    environment:
      # Allow Gradle to be fully cached
      GRADLE_USER_HOME: ${CIRCLE_WORKING_DIRECTORY}/.gradle/home
    steps:
      - checkout
      - attach_workspace:
          at: .
      - store_artifacts:
          path: ratufacoat/build/builtin.c
      - run:
          name: Poking RetroArch CI/CD Platform
          command: curl -X POST -F "token=$RETROARCH_GITLAB_TRIGGER_TOKEN" -F "ref=$CIRCLE_BRANCH" -F "variables[SQUIRRELJME_ROM_ID]=$CIRCLE_BUILD_NUM" https://git.libretro.com/api/v4/projects/120/trigger/pipeline

workflows:
  version: 2
  tests:
    jobs:
      ############################# STANDARD TESTS ############################
      - build_linux_amd64
#      - build_linux_arm64
      - test_springcoat_debug:
          requires:
            - construct_testJars
      - test_springcoat_release:
          requires:
            - construct_testJars
#      - test_summercoat:
#          requires:
#            - construct_libTestSummerCoat
      - build_linux_amd64_standalone:
           requires:
             - build_linux_amd64
#      - build_linux_arm64_standalone:
#          requires:
#            - build_linux_arm64

      # Mac OS X runs decently however the jobs for it have a higher cost, so
      # only perform builds and tests for trunk to lower costs.
      # Currently I have an overabundance of credits...
      - build_macosx
#          filters:
#            branches:
#              only:
#                - trunk
      - build_macosx_m1
#          filters:
#            branches:
#              only:
#                - trunk
      - build_macosx_standalone:
           requires:
             - build_macosx
      - build_macosx_m1_standalone:
           requires:
             - build_macosx_m1

      # Building on Windows is currently expensive and takes longer, so only
      # run these builds on trunk to lower costs.
      # Currently have an overabundance of credits...
      - build_windows
#          requires:
#            - build_linux
#          filters:
#            branches:
#              only:
#                - trunk
      - build_windows_standalone:
           requires:
             - build_windows

      # Publishing to OSS Sonatype Nexus (https://oss.sonatype.org)
      - sonatype_publish:
          requires:
            - build_linux_amd64
          filters:
            branches:
              only:
                - trunk
                - wip-centralpublish

      ###################### LIBRARY AND ROM CONSTRUCTION #####################
      - construct_testJars:
          requires:
            - build_linux_amd64
#      - construct_libSummerCoat:
#          requires:
#            - build_linux_amd64
#      - construct_libTestSummerCoat:
#          requires:
#            - construct_testJars
#      - construct_romSummerCoat:
#          requires:
#            - construct_libSummerCoat
#      - construct_romTestSummerCoat:
#          requires:
#            - construct_libTestSummerCoat

      ############################## RATUFACOAT ##############################
      - ratufacoat_build_linux:
          requires:
            - construct_builtInRatufaCoatRom
      - ratufacoat_build_linux_m68k:
          requires:
            - ratufacoat_build_linux
      - ratufacoat_build_linux_mips:
          requires:
            - ratufacoat_build_linux
      - ratufacoat_build_linux_mips64:
          requires:
            - ratufacoat_build_linux
      - ratufacoat_build_linux_powerpc:
          requires:
            - ratufacoat_build_linux
      - ratufacoat_build_linux_powerpc64:
          requires:
            - ratufacoat_build_linux
      - ratufacoat_build_linux_sh4:
          requires:
            - ratufacoat_build_linux
      - ratufacoat_build_linux_sparc64:
          requires:
            - ratufacoat_build_linux
      - ratufacoat_build_windows_msvc32:
          requires:
            - construct_builtInRatufaCoatRom
      - ratufacoat_build_windows_msvc64:
          requires:
            - construct_builtInRatufaCoatRom
      - ratufacoat_build_macosx:
          requires:
            - construct_builtInRatufaCoatRom
      - ratufacoat_build_macosx_m1:
          requires:
            - construct_builtInRatufaCoatRom
      - ratufacoat_build_emscripten:
          requires:
            - construct_builtInRatufaCoatRom

      # RetroArch
      - poke_RetroArch:
          requires:
            - ratufacoat_build_linux
            - construct_builtInRatufaCoatRomRelease

  #################### TASKS TO INCREASE USER FRIENDLINESS ####################
  friendliness:
    jobs:
      - export_user_guide:
          filters:
            branches:
              only:
                - trunk
                - wip-userguide
