# Changelog

# 0.4.0 (August 1, 2019)

Now SquirrelJME has the SummerCoat virtual machine which is much lighter and
faster than SpringCoat. There should definitely be very noticable performance
increases.

SquirrelJME is also available on RetroArch since the implementation of
RatufaCoat which is written in C and is capable of using the SquirrelJME
Runtime.

_Note that this is a work in progress and not everything will run, due to_
_the implementation being incomplete. However it does work and is proven to_
_work, which means progress can continue as such. Later releases of_
_SquirrelJME will always be an improvement over the older versions._

More detailed changes:

 * Build system
   * Builder
     * Allow the build system to launch binaries in a VM even if they have no
       source code.
     * Handle cases during compilation if a dependency has no source code.
     * If an attempt is made to compile a binary with no source code, throw a
       new exception type indicating this rather than the generic failure
       exception because this case can be handled.
     * When shading JARs for distribution, ignore entries in JARs which are
       directories. Directories do not need to appear in the JAR, however they
       may still be implicit within ZIPs.
   * Launching
     * An alternative VM may be specified.
     * Correct cases where `NullPointerException` is thrown when a `Display`
       was initialized but was not yet claimed by any program.
     * The profiler snapshot can be written to a specific file.
     * System properties may be defined and passed to the launched program.
   * Started work on JavaDoc generation.
 * Tests
   * Adjusted the results in the logarithm test to adjust the ulp to what
     SquirrelJME generates. The results are still valid as it is valid to
     be within a 1 ulp range, however the test framework only supports
     exact values.
   * Added the missing _mimemessage_ file for the MIME file decoding test.
   * Allow tests to timeout so that they do not run forever in the event of
     some kind of deadlock.
   * Refactored the test framework to be easier to maintain.
 * Programs and Libraries
   * `cldc-compact`
     * Added a rehash indicator for the internal `__BucketMap__` so that
       `java.util.Hashtable` knows when a reorder was performed.
     * Added `java.util.Vector`, it was missing.
     * Added support for ISO-8859-15, this is the newer encoding with the
       Euro symbol.
     * Corrected bug in `__CanSetPrintStream__` where if it were set to itself
       then it could lead to infinite recursion, instead if this kind of
       stream is attempted to be set it will use the target.
     * Fallback encoding is now UTF-8 and not ISO-8859-1.
     * If the name of the requested resource is blank, ignore it.
     * If a resource was not found, do a traditional search of the classpath
       for the given resource. This technically is not valid, however some
       games use the wrong class when looking up resources. Note that the
       current suite will always be searched first to maintain the correct
       behavior.
     * Implemented `java.io.DataInputStream`.
     * Implemented `java.io.InputStream`.
     * Implemented `java.io.PrintStream`.
     * Implemented `java.util.EventObject`.
     * Implemented `java.util.Hashtable`.
     * Implemented `java.util.LinkedHashMap`.
     * Implemented `java.util.LinkedList`.
     * Made the stack trace printed by `Throwable` much cleaner so that it
       takes up less screen space and is formatted a bit better.
     * Return values for `line.separator`, `microedition.encoding`,
       `microedition.configuration`, and `microedition.locale`.
   * `demo-hello`
     * Made the system properties array `final`.
   * `launcher`
     * Added the system property `cc.squirreljme.autolaunch` to automatically
       launch a program once the program list is read.
     * When a program is launched, instead of saying just "Loading..." instead
       allow show the program which is being loaded in the title.
   * `media-api`
     * Add null media support for: players, and volume control.
   * `meep-midlet`
     * Implement `MIDlet.checkPermission()`.
   * `meep-rms`
     * Added basic support for record stores.
   * `meep-swm`
     * Added proprietary `ExtendedTaskManager` interface which can be used
       to specify arguments, system properties, and console output alternatives
       to launched tasks.
   * `midp-lcdui`
     * Added a 12 strike font.
     * Added capability flag for pointer events.
     * Added support for getting the number of display colors which depends on
       the pixel format of the display.
     * Added support to get the number of alpha levels.
     * Adjusted the style of the lowercase A character in the sans-serif font.
     * Changed 16 strike font to be the large size font and made the 12 strike
       font the medium size font.
     * Corrected mapping of characters since SQFs are ISO-8859-1 and most games
       may be ISO-8859-1, since some characters may be missing in the font
       use similar graphics for them.
     * Fully added `cc.squirreljme.runtime.lcdui.gfx.SerializedGraphics`, This
       allows all of the graphics drawing functions to be forwarded when
       graphics acceleration is used, previously only a subset of methods were
       implemented.
     * Fixed crash in text drawing when an empty string is drawn.
     * Fully drawn default fonts.
     * Made all the graphics operations not throw a `TODO`, instead they will
       just draw a placeholder graphic.
     * Moved the graphics drawing operations to another class.
     * Removed the 24 strike font, it was too large.
     * Support double buffered `GameCanvas`.
     * Update the `Display` when a command is added or removed.
     * Use a default title for a `Displayable` if one has not been set, this
       will be in the order of the suite name, the main class, and if those
       are not valid then "SquirrelJME" will be used instead.
     * When a `Displayable` is made current and it is already the current
       displayed item, always set the title since it may have been placed in
       the background by another application calling `setCurrent()`.
   * `tac`
     * Override standard output and forward to standard error while a test is
       running, so things are not kludged.
   * `tac-runner`
     * Allow specific tests to be ran via the main arguments.
     * Generate JUnit output which can be used in test environments.
     * Performed some refactoring on the deserialization/serialization code.
   * `tool-classfile`
     * Corrected parsing of the stack map table.
     * Removed `net.multiphasicapps.classfile.ExecutableCode`, it was not used.
   * `tool-profiler`
     * When writing the NPS snapshot, set a limit on how deep the stack can
       traverse in the event an infinite recursive method was profiled.
 * Compiler Backend
   * Added a bunch of string representations for class structures.
   * Created a stack-cached register based compiler for Java byte code.
   * Implemented a new tree based unit system for packages and classes.
   * `MergedPathSet` can be initialized by iterables now.
 * Virtual Machines
   * General
     * Adjusted the Shaded JAR directory layout and added a dash in the path
       so that classes technically become invalid.
     * Allow properties to be obtained from internally passed system
       properties.
     * Added string representation for the stack map table.
     * Add ability to start tasks with command line arguments, system
       properties, and alternative console redirection (to capture output).
     * Correct cases where `NullPointerException` is thrown when a `Display`
       was initialized but was not yet claimed by any program.
     * If a JAR is not valid, the launcher will no longer fail to start since
       the invalid JAR is just ignored.
   * SpringCoat
     * Add limit to stack frame depth.
     * Add support for system properties being based to virtual machine
       instances.
     * Profiler thread lists are easier to read because the main suite is
       listed instead of the VM identifier.
   * SummerCoat
     * New Virtual Machine, register based.
     * Vast improvements over SpringCoat, faster and slimmer.
   * RatufaCoat
     * New Virtual Machine, based off SummerCoat.
     * Fast and slim, written in C.
 * Cleanup
   * Removed the `test.sh` script, it was empty.

# 0.2.0 (December 25, 2018)

SquirrelJME's first release!

Note that this is a work in progress and not everything will run, due to
the implementation being incomplete. However it does work and is proven to
work, which means progress can continue as such. Later releases of SquirrelJME
will always be an improvement over the older versions.

