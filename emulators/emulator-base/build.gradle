import cc.squirreljme.plugin.general.cmake.CMakeBuildTask
import cc.squirreljme.plugin.tasks.MimeDecodeResourcesTask

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption
import java.util.concurrent.TimeUnit
import java.util.regex.Pattern

plugins
{
	id "java-library"
}

description = "This library provides the base support for testing and " +
	"running SquirrelJME on a Java SE host, which is normally not " +
	"capable of doing as such."

// Due to the combination of C++ and Java these dependencies have to be very
// specific in that they only refer to the Java or C++ portion. So
// "implementation" and "compile" cannot be used because the C++ library will
// try to use them during compilation.
dependencies
{
	api project(":modules:cldc-compact")
	api project(":modules:common-vm")
	api project(":modules:io")
	api project(":modules:tac")
	api project(":modules:zip")
	api project(":modules:debug-jdwp")
	api project(":modules:debug-jdwp-vm-host")
}

// Native emulator support library
Provider<CMakeBuildTask> libNativeEmulatorBase = tasks.register(
	"libNativeEmulatorBase",
	CMakeBuildTask.class,
	project.getProjectDir().toPath().getParent()
		.resolve("emulator-base-native"),
	System.mapLibraryName("emulator-base"),
	["libEmulatorBase"])

// Native implementations
Provider<CMakeBuildTask> libsNativeNanoCoat = tasks.register(
	"libsNativeNanoCoat",
	CMakeBuildTask.class,
	rootProject.getProjectDir().toPath().resolve("nanocoat"),
	"",
	["BaseStatic"])

// The base library needs to exist first
libNativeEmulatorBase.get().dependsOn(libsNativeNanoCoat)

// Decoding of mime resources
Provider<MimeDecodeResourcesTask> mimeDecode = tasks.register(
	"mimeDecode", MimeDecodeResourcesTask.class,
	"main",
	tasks.named("processResources").get(),
	tasks.named("clean").get())

processResources.dependsOn(mimeDecode)
processResources.dependsOn(libNativeEmulatorBase)
processResources.dependsOn(libsNativeNanoCoat)

compileJava.dependsOn(libNativeEmulatorBase)
compileJava.dependsOn(libsNativeNanoCoat)

mimeDecode.get().dependsOn(libNativeEmulatorBase)
mimeDecode.get().dependsOn(libsNativeNanoCoat)

// We need the native library in the JAR before we can properly use it
// But we can compile the Java code just fine without it
jar {
	dependsOn mimeDecode, libNativeEmulatorBase, libsNativeNanoCoat

	from libNativeEmulatorBase.get().cmakeOutFile.toFile()
	into "/"
}

java {
	// Use a fixed version of the JVM
	compileJava
	{
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
		
		// Use the default bootstrap classpath
		options.bootstrapClasspath = null
	}

	// Maximize debugging
	compileJava.options.debug = true
	compileJava.options.debugOptions.setDebugLevel("source,lines,vars")

	// Copy settings
	compileTestJava.options.debug = compileJava.options.debug
	compileTestJava.options.debugOptions = compileJava.options.debugOptions
	
	javadoc.options.tags = [ "squirreljme.property",
		"squirreljme.env",
		"squirreljme.error",
		"squirreljme.syscallparam",
		"squirreljme.syscallreturn",
		"squirreljme.tsiparam",
		"squirreljme.configtype",
		"squirreljme.uiwidgetparam" ]
}
