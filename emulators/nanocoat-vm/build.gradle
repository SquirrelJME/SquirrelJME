import cc.squirreljme.plugin.util.PathUtils

import java.nio.file.Files
import java.nio.file.Paths
import java.util.concurrent.TimeUnit

plugins
{
	id "java-library"
}

description = "This is able to use the NanoCoat shared library to run the " +
	"code within the emulator."

dependencies
{
	api project(":emulators:emulator-base")
	
	api project(":modules:cldc-compact")
	api project(":modules:common-vm")
	api project(":modules:meep-swm")
	api project(":modules:tool-classfile")
	api project(":modules:debug-jdwp")
}

static java.nio.file.Path cmakeExePath(){
	java.nio.file.Path cmakePath = PathUtils.findPath("cmake")
	if (cmakePath == null) {
		return PathUtils.findPath("cmake.exe")
	}
	
	return cmakePath
}

// Only perform the build if CMake exists
Spec<Task> nanoCoatOnlyIf = (taskIsh) -> {
	// This is only valid if there is CMake
	return cmakeExePath() != null
}

// CMake related files
java.nio.file.Path cmakeRoot =
	gradle.rootProject.projectDir.toPath().resolve("nanocoat")
java.nio.file.Path cmakeBuild =
	project.buildDir.toPath().resolve("cmake")
java.nio.file.Path emuLib =
	cmakeBuild.resolve(Paths.get(
		System.mapLibraryName("emulator-nanocoat")))

static void dumpLog(Logger logger, LogLevel level, java.nio.file.Path pathy) {
	try {
		for (String ln : Files.readAllLines(pathy))
			logger.log(level, ln)
	} catch (Throwable e) {
		e.printStackTrace()
	}
}

// Compiles the NanoCoat binary library
tasks.register("libNativeNanoCoat", (taskIsh) -> {
	// Info
	group = "squirreljme"
	description = "Builds the native NanoCoat library."
	
	// Needs CMake
	taskIsh.onlyIf = nanoCoatOnlyIf
	
	// Where is the CMake root? It depends on it
	taskIsh.inputs.dir(cmakeRoot)
	
	// Where do the sourced CMake files go?
	taskIsh.outputs.dir(cmakeBuild)
	
	// The library that is actually created
	taskIsh.outputs.file(emuLib)
	
	// When is this up to date?
	taskIsh.outputs.upToDateWhen (taskX) -> {
		return Files.isDirectory(cmakeBuild)
	}
	
	// Perform configuration and compilation step
	taskIsh.doLast {
		// Make sure the target exists
		Files.createDirectories(cmakeBuild)
		
		// Debug
		System.err.printf("CMake is at %s%n", cmakeExePath())
		
		// Set executable
		ProcessBuilder procBuilder = new ProcessBuilder()
		procBuilder.command(new String[]{
			cmakeExePath().toAbsolutePath().toString(),
			"-S", cmakeRoot.toAbsolutePath().toString(),
			"-B", cmakeBuild.toAbsolutePath().toString()
		})
		
		// Log the output somewhere
		procBuilder.redirectOutput(
			cmakeBuild.resolve("configure.out").toFile())
		procBuilder.redirectError(
			cmakeBuild.resolve("configure.err").toFile())
		
		// Start the process
		Process proc = procBuilder.start()
		
		// Wait for it to complete
		try {
			if (!proc.waitFor(5, TimeUnit.MINUTES) ||
				proc.exitValue() != 0)
				throw new RuntimeException("CMake failed to configure...")
		} finally {
			dumpLog(logger,
				LogLevel.LIFECYCLE, cmakeBuild.resolve("configure.out"))
			dumpLog(logger,
				LogLevel.ERROR, cmakeBuild.resolve("configure.err"))
		}
		
		// Set executable
		procBuilder = new ProcessBuilder()
		procBuilder.command(new String[]{
			cmakeExePath().toAbsolutePath().toString(),
			"--build", cmakeBuild.toAbsolutePath().toString(),
			"-t", "squirreljmeEmulatorLib"
		})
		
		// We do not care for the output really
		procBuilder.redirectOutput(
			cmakeBuild.resolve("build.out").toFile())
		procBuilder.redirectError(
			cmakeBuild.resolve("build.err").toFile())
		
		// Start the process
		proc = procBuilder.start()
		
		// Wait for it to complete
		try {
			if (!proc.waitFor(5, TimeUnit.MINUTES) ||
				proc.exitValue() != 0)
				throw new RuntimeException("CMake failed to build...")
		} finally {
			dumpLog(logger, LogLevel.LIFECYCLE,
				cmakeBuild.resolve("configure.out"))
			dumpLog(logger, LogLevel.ERROR,
				cmakeBuild.resolve("configure.err"))
		}
		
		// We need the library for this to even work
		if (!Files.exists(emuLib))
			throw new FileNotFoundException("Could not find output library.")
	}
})

// We need to include the native library here so NanoCoat actually works
jar {
	// Requires the NanoCoat library
	dependsOn libNativeNanoCoat
	
	// Include library into the root
	from emuLib.toFile()
	into "/"
}

// JAR resources
processResources {
	// We need to embed the shared library here
	dependsOn libNativeNanoCoat
}

java {
	// Use a fixed version of the JVM
	compileJava
	{
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
		
		// Use the default bootstrap classpath
		options.bootstrapClasspath = null
	}

	// Maximize debugging
	compileJava.options.debug = true
	compileJava.options.debugOptions.setDebugLevel("source,lines,vars")

	// Copy settings
	compileTestJava.options.debug = compileJava.options.debug
	compileTestJava.options.debugOptions = compileJava.options.debugOptions
	
	javadoc.options.tags = [ "squirreljme.property",
		"squirreljme.env",
		"squirreljme.error",
		"squirreljme.syscallparam",
		"squirreljme.syscallreturn",
		"squirreljme.tsiparam",
		"squirreljme.configtype",
		"squirreljme.uiwidgetparam" ]
}
