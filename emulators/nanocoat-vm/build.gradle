import cc.squirreljme.plugin.util.PathUtils

import java.nio.file.Files
import java.util.concurrent.TimeUnit

plugins
{
	id "java-library"
}

description = "This is able to use the NanoCoat shared library to run the " +
	"code within the emulator."

dependencies
{
	api project(":emulators:emulator-base")
}

static java.nio.file.Path cmakeExePath(){
	java.nio.file.Path cmakePath = PathUtils.findPath("cmake")
	if (cmakePath == null) {
		return PathUtils.findPath("cmake.exe")
	}
	
	return cmakePath
}

// Only perform the build if CMake exists
Spec<Task> nanoCoatOnlyIf = (taskIsh) -> {
	// This is only valid if there is CMake
	return cmakeExePath() != null
}

// Compiles the NanoCoat binary library
tasks.register("libNativeNanoCoat", (taskIsh) -> {
	// Info
	group = "squirreljme"
	description = "Builds the native NanoCoat library."
	
	// Needs CMake
	taskIsh.onlyIf = nanoCoatOnlyIf
	
	// Where is the CMake root? It depends on it
	java.nio.file.Path cmakeRoot = gradle.rootProject.projectDir.toPath()
		.resolve("nanocoat")
	taskIsh.inputs.dir(cmakeRoot)
	
	// Where do the sourced CMake files go?
	java.nio.file.Path cmakeBuild = project.buildDir.toPath()
		.resolve("cmake")
	taskIsh.outputs.dir(cmakeBuild)
	
	// When is this up to date?
	taskIsh.outputs.upToDateWhen (taskX) -> {
		return Files.isDirectory(cmakeBuild)
	}
	
	// Perform configuration and compilation step
	taskIsh.doLast {
		// Make sure the target exists
		Files.createDirectories(cmakeBuild)
		
		// Debug
		System.err.printf("CMake is at %s%n", cmakeExePath())
		
		// Set executable
		ProcessBuilder procBuilder = new ProcessBuilder()
		procBuilder.command(new String[]{
			cmakeExePath().toAbsolutePath().toString(),
			"-S", cmakeRoot.toAbsolutePath().toString(),
			"-B", cmakeBuild.toAbsolutePath().toString()
		})
		
		// We do not care for the output really
		procBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT)
		procBuilder.redirectError(ProcessBuilder.Redirect.INHERIT)
		
		// Start the process
		Process proc = procBuilder.start()
		
		// Wait for it to complete
		if (!proc.waitFor(5, TimeUnit.MINUTES))
			throw RuntimeException("CMake Took Too Long")
		
		throw new Error("TODO")
	}
})

// JAR Building
jar {
	// Requires the NanoCoat library
	dependsOn libNativeNanoCoat
}

// JAR resources
processResources {
	// We need to embed the shared library here
	dependsOn libNativeNanoCoat
}

java {
	// Use a fixed version of the JVM
	compileJava
	{
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
		
		// Use the default bootstrap classpath
		options.bootstrapClasspath = null
	}

	// Maximize debugging
	compileJava.options.debug = true
	compileJava.options.debugOptions.setDebugLevel("source,lines,vars")

	// Copy settings
	compileTestJava.options.debug = compileJava.options.debug
	compileTestJava.options.debugOptions = compileJava.options.debugOptions
	
	javadoc.options.tags = [ "squirreljme.property",
		"squirreljme.env",
		"squirreljme.error",
		"squirreljme.syscallparam",
		"squirreljme.syscallreturn",
		"squirreljme.tsiparam",
		"squirreljme.configtype",
		"squirreljme.uiwidgetparam" ]
}
