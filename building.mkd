# Building

------------------------------------------------------------------------------

***Patience is required:***
***Currently SquirrelJME is in active development and although it can***
***run and produce binaries, there are limitations to consider.***
***Currently only a limited set of programs may be ran on SquirrelJME.***

------------------------------------------------------------------------------

SquirrelJME requires the following before it can be built:

 * Java 8 or newer Virtual Machine and Compiler
 * C++ Compiler (Utilized for Testing)
   * Clang
   * GCC
   * Microsoft Visual Studio 2010 or newer
   * XCode

## Notes on Running

SquirrelJME uses a simplified error system which starts with a two capital
letter prefix followed by two digits and letters.

 * [List of Error Codes](http://multiphasicapps.net/uv/errors.mkd)

## Installing Java

SquirrelJME requires a Java 8 virtual machine in order to build itself. Gradle
is used as well however it is available through Gradle Wrapper.

### AdoptOpenJDK (Windows, Linux, and Mac OS X)

AdoptOpenJDK is the recommended way to build and setup SquirrelJME as it has
long-term support and is easy to setup. You will need at least a Java 8
variant of AdoptOpenJDK.

 * <https://adoptopenjdk.net/releases.html?variant=openjdk8&jvmVariant=hotspot>

Please note that Java 11 may be used as well.

### Oracle's JDK (Windows, Linux, and Mac OS X)

Oracle's JDK supports modern systems and can be downloaded from:

 * <http://www.oracle.com/technetwork/java/javase/downloads/index.html>
 
Ensure that you **download and install** the ***JDK***.

If running on ReactOS/Windows/Wine, make sure that the `PATH` environment
variables refers to the JDK's binary directory:

 * `C:\Program Files\Java\jdk1.8.0_131\bin\`

### Common Linux Distributions

If you use a common and popular Linux distribution it likely has a JDK
available.

 * Arch
   * See <https://wiki.archlinux.org/index.php/Java>
 * Debian, Ubuntu, and derivatives
   * See <https://wiki.debian.org/Java>
   * One of the following depending on package availability
     * `apt-get install openjdk-8-jdk`
     * `apt-get install openjdk-9-jdk`
     * `apt-get install openjdk-11-jdk`
 * Gentoo
   * See <https://wiki.gentoo.org/wiki/Java>

### IntelliJ IDEA (Optional)

SquirrelJME is developed on IntelliJ Ultimate, however Community Edition may
still be used. This makes development easier and more integrated along with
whatever code you write or contribute will match the style that is set in
SquirrelJME.

 * <https://www.jetbrains.com/idea/>

## Installing C++ Compiler

### Common Linux Distributions

For the C++ Compiler which is needed for testing:

 * Debian, Ubuntu, and derivatives
   * `apt-get install build-essential g++`
   * `apt-get install build-essential clang`

### Windows

For Gradle to detect a C++ compiler, it needs either Microsoft Visual Studio
or a GCC installation via Cygwin, or a GCC installation via Mingw-w64.

More information is located at 
<https://docs.gradle.org/current/userguide/building_cpp_projects.html#windows>.

#### Microsoft Visual Studio

Microsoft's Visual Studio may be used by Gradle to compile the code, note that
it only uses the compiler tool from the installation (no GUI is needed).

 * Download from <https://visualstudio.microsoft.com/downloads/>.
 * At the minimum, the following must be installed (pieces that are crossed
   out may be different for future versions of Microsoft's Compiler):
   * _Windows Universal C Runtime_
   * _C++ Build Tools core Features_
   * _MSVC ~~v142~~ - VS ~~2019~~ C++ ~~x86/x64~~ build tools_
   * _C++ Redistributable Update_
   * _Windows 10 SDK_ 
 * Alternatively, you can run the Visual Studio installer and import the
   components file, this file can be found in the root and is called
   `.vsconfig`.

#### Mingw-w64

You can use Mingw-w64 as well, it is a freely available compiler.

 * Main web site: <https://mingw-w64.org>.
 * In the downloads section it is recommended to use _MingW-W64-builds_:
   * For the configuration use:
     * GCC Version: The latest (at time of writing it was 8.0.0).
     * Threads: _win32_.
     * Exception Handling: _seh_.
     * Install both 32-bit and 64-bit.

#### Cygwin

You can also download Cygwin at: <https://www.cygwin.com/>.

### Mac OS X

You must install XCode, more information on XCode is at
<https://developer.apple.com/xcode/>. Alternatively there is a command line
tool to install the XCode command line utilities for example if you are
using Brew:

 * `xcode-select --install`

# Build Environment

The main interaction with the SquirrelJME build environment is with Gradle
which manages anything related to building and testing. All builds are
performed through Gradle Wrapper which is used as the following:

 * Windows: `gradlew`
 * Others: `./gradlew`

Gradle uses tasks of which multiple may be specified accordingly, such as
running the tests within the repository:

 * `gradlew test`

## RetroArch

Building for RetroArch uses the `makefilelibretro` makefile. As such building
SquirrelJME for your current system involves using the alternative makefile.

 * `make`
 * Windows:
   * `make -f makefilelibretro CC=i686-w64-mingw32-gcc platform=mingw_x86`
   * `make -f makefilelibretro CC=x86_64-w64-mingw32-gcc platform=mingw_x86_64`

## Docker

In the root directory, execute the command:

 * `docker build .`

This will create an image that you will be able to use to execute one of
the built-in virtual machines.

# Development Virtual Machines

For development purposes you may use the virtual machines provided by the
SquirrelJME run-time. Modules within SquirrelJME have tasks which allow them
to be ran accordingly.

 * SpringCoat
   * `:modules:<name>:runSpringCoat` (running)
   * `:modules:<name>:testSpringCoat` (testing)
 * SummerCoat
   * `:modules:<name>:runSummerCoat` (running)
   * `:modules:<name>:testSummerCoat` (testing)
 * Native (runs on the host Java SE)
   * `:modules:<name>:runNative` (running)
   * `:modules:<name>:test` (testing)

The following _System_ properties are available:

 * `squirreljme.midlet=value` -- The MIDlet to run, in the following order:
   * If `value` is a number and is `-1`, then no MIDlet will be selected and
     the `Main-Class` attribute will be force selected.
   * If `value` is a number, then it will be treated as an index. If the index
     is not within the MIDlet bounds then it will run the first MIDlet.
   * If `value` is a string, then a search will be performed for a MIDlet
     with a matching case-insensitive title. 
   * Otherwise if `value` is a string, it will construct a virtual MIDlet
     which executes the given value as the name of a class within the JAR.
 * `test.single=classname` -- Run only the given test:
   * Will be the test class to be ran.
