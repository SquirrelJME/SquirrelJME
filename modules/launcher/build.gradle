import cc.squirreljme.plugin.swm.JavaMEMidlet
import cc.squirreljme.plugin.swm.JavaMEMidletType

description = "This project contains the graphical launcher " +
	"that SquirrelJME uses to act as a front end interface to running user" +
	"programs."
version = rootProject.version

squirreljme
{
	javaDocErrorCode = "EP"
	swmType = JavaMEMidletType.APPLICATION
	swmName = "SquirrelJME Launcher (Graphical)"
	swmVendor = "Stephanie Gawroriski"
	ignoreInLauncher = true
	isMainLauncher = true
	midlets += new JavaMEMidlet("SquirrelJME Launcher (Graphical)", null,
		"cc.squirreljme.runtime.launcher.ui.MidletMain")
	tags += "j2me"
	tags += "medium"
	
	// Keep these around for testing
	proGuardOptions += ["-keep",
		"class", "cc.squirreljme.runtime.launcher.ui.MidletMain"]
	proGuardOptions += ["-keepclassmembers",
		"class", "cc.squirreljme.runtime.launcher.ui.MidletMain", "{",
				"boolean", "_refreshLock", ";",
				"java.util.ArrayList", "_listedSuites", ";",
			"}"]
	proGuardOptions += ["-keepclassmembernames",
		"class", "cc.squirreljme.runtime.launcher.ui.MidletMain", "{",
				"boolean", "_refreshLock", ";",
				"java.util.ArrayList", "_listedSuites", ";",
			"}"]
	
	// Ignore warnings here, since things just break?
	proGuardOptionsTest += ["-ignorewarnings"]
	
	// Optional dependencies for testing, so that these two projects appear
	// on the list of applications
	optionalDependenciesTest += project(':modules:demo-hello')
	optionalDependenciesTest += project(':modules:lcdui-demo')
}

dependencies
{
	api project(":modules:cldc-compact")

	api project(":modules:midp-lcdui")
	api project(":modules:meep-lui")
	api project(":modules:meep-midlet")
	api project(":modules:meep-swm")
	api project(":modules:tango-icon-theme")
}
