import org.gradle.plugins.ide.idea.model.IdeaLanguageLevel
import org.gradle.util.VersionNumber

plugins {
	id "de.set.ecj" version "1.4.1" apply false
	id "idea"
}

group = "cc.squirreljme.modules"
description = "Modules which are a part of SquirrelJME."

// Helper function to normalize the Maven version
static VersionNumber normalizeMavenVersion(Object __inVersion) {
	VersionNumber inVersion = VersionNumber.parse(__inVersion.toString())
	
	// If this is an even version, then this is a release version
	if ((inVersion.minor % 2) == 0)
		return inVersion
	
	// Otherwise odd numbers are considered to be "snapshot" versions
	return VersionNumber.parse(inVersion.toString() + "-SNAPSHOT")
}

// Every sub-project needs SquirrelJME specific pieces
subprojects {
	// Apply ECJ for compilation? (Such as too new of Java)
	if (project.hasProperty("squirreljmeEcjEnabled") &&
		project.squirreljmeEcjEnabled) {
		apply plugin: "de.set.ecj"
	}
	
	apply plugin: "java-library"
	apply plugin: "java-test-fixtures"
	apply plugin: "cc.squirreljme.plugin"
	apply plugin: "idea"
	apply plugin: "maven-publish"
	apply plugin: "signing"
	
	// The Java versions this works with
	sourceCompatibility = 8
	targetCompatibility = 8
	
	idea {
		module
		{
			// This is 1.8 because 1.7 is not really available
			jdkName = "1.8"
			
			// However, everything targets 1.7 otherwise
			languageLevel = new IdeaLanguageLevel("1.7")
			targetBytecodeVersion = JavaVersion.VERSION_1_7
		}
	}
	
	// Disable native header generation when using ECJ as it does not have
	// the -h option. See:
	// https://github.com/gradle/gradle/issues/12904#issuecomment-619212927
	if (project.hasProperty("squirreljmeEcjEnabled") &&
		project.squirreljmeEcjEnabled) {
		tasks.withType(JavaCompile) {
			options.headerOutputDirectory.convention((Directory)null)
		}
	}
	
	// Configure the compiler
	java {
		// Java ME 8 is effectively Java 7, but use Java 8 here
        compileJava.sourceCompatibility = JavaVersion.VERSION_1_7
		compileJava.targetCompatibility = JavaVersion.VERSION_1_8

		// All files are always in UTF-8 format
		compileJava.options.encoding = "utf-8"

		// Emit deprecation errors
		compileJava.options.deprecation = true
		
		// Maximize debugging
		compileJava.options.debug = true
		compileJava.options.debugOptions.setDebugLevel("source,lines,vars")

		// Copy to tests
		compileTestJava.sourceCompatibility = compileJava.sourceCompatibility
		compileTestJava.targetCompatibility = compileJava.targetCompatibility
		compileTestJava.options.encoding = compileJava.options.encoding
		compileTestJava.options.verbose = compileJava.options.verbose
		compileTestJava.options.deprecation = compileJava.options.deprecation
		compileTestJava.options.debug = compileJava.options.debug
		compileTestJava.options.debugOptions = compileJava.options.debugOptions

		// Copy to JavaDoc
		javadoc.options.source = "1.7"
		javadoc.options.tags = [ "squirreljme.property",
			"squirreljme.env",
			"squirreljme.error",
			"squirreljme.syscallparam",
			"squirreljme.syscallreturn",
			"squirreljme.tsiparam",
			"squirreljme.configtype",
			"squirreljme.uiwidgetparam" ]
			
		// Build sources and JavaDoc as well
		withSourcesJar()
		withJavadocJar()
	}

	// Enable SquirrelJME Tests
	apply from: project.rootProject.findProject(":emulators:emulator-base").
		projectDir.toPath().resolve("enable-testing.gradle").toFile()
	
	// Publishing
	publishing {
		// What is being published?
		publications {
			maven(MavenPublication) {
				// Adjustments to the Maven POM
				pom {
					/*System.err.printf("Name/Desc: %s %s%n", project.squirreljme.swmName ?: project.name, project.description)
					name = project.squirreljme.swmName ?: project.name
					description = project.description*/
					url = "https://squirreljme.cc/"
					
					// SquirrelJME started to exist in 2016!
					inceptionYear = "2016"
					
					licenses {
						license {
							name = "GNU General Public License v3"
							url = "https://squirreljme.cc/file?name=LICENSE&ci=trunk"
						}
					}
					
					developers {
						developer {
							id = "stephanie.gawroriski"
							name = "Stephanie Gawroriski"
							email = "xerthesquirrel@gmail.com"
						}
					}
					
					contributors {
						contributor {
							name = "Stephanie Gawroriski"
							email = "xerthesquirrel@gmail.com"
							roles = [ "Primary Developer" ]
							timezone = "America/New_York"
							url = "https://shadowtail.dev/"
						}
					}
						
					scm {
						url = "https://squirreljme.cc/"
						connection = "fossil:https://squirreljme.cc/"
					}
					
					organization {
						name = "SquirrelJME"
						url = "https://squirreljme.cc/"
					}
					
					issueManagement {
						system = "GitHub"
						url = "https://github.com/SquirrelJME/SquirrelJME/issues"
					}
					
					ciManagement {
						system = "CircleCI"
						url = "https://app.circleci.com/pipelines/github/SquirrelJME"
					}
					
					withXml {
						// Lazy evaluation of the project name and description so that it
						// uses the proper name for Maven and otherwise
						asNode().appendNode("name", project.squirreljme.swmName ?: project.name)
						asNode().appendNode("description", project.description)
						
						def propMap = asNode().appendNode("properties")
						
						// Properties that are needed by Maven, although
						// not recommended to use Maven for building
						propMap.appendNode("maven.compiler.source",
							"1.7")
						propMap.appendNode("maven.compiler.target",
							"1.7")
						propMap.appendNode("project.build.sourceEncoding",
							"UTF-8")
						
						// SquirrelJME properties
						if (project.squirreljme.swmType != null)
							propMap.appendNode("squirreljme.type",
								project.squirreljme.swmType)
						propMap.appendNode("squirreljme.vendor",
							project.squirreljme.swmVendor)
						propMap.appendNode("squirreljme.errorCode",
							project.squirreljme.javaDocErrorCode)
						propMap.appendNode("squirreljme.configurations",
							Objects.toString(project.squirreljme.definedConfigurations))
						propMap.appendNode("squirreljme.profiles",
							Objects.toString(project.squirreljme.definedProfiles))
						propMap.appendNode("squirreljme.standards",
							Objects.toString(project.squirreljme.definedStandards))
						propMap.appendNode("squirreljme.midlets",
							Objects.toString(project.squirreljme.midlets))
					}
				}
				
				// Normal information
				groupId = "cc.squirreljme.modules"
				artifactId = project.name
				version = normalizeMavenVersion(rootProject.version)
				
				// What is being published?
				from components.java
			}
		}
		
		// Where is this to be published?
		repositories {
			// Publishing to local Maven
			mavenLocal()
			
			// OSSRH Repository (https://oss.sonatype.org/)
			maven {
				url = (normalizeMavenVersion(rootProject.version)
					.toString().endsWith("-SNAPSHOT") ? 
					"https://oss.sonatype.org/content/repositories/snapshots/" :
					"https://oss.sonatype.org/service/local/staging/deploy/maven2/")
				
				credentials {
					username = findProperty("ossrhUser") ?: "ossrh_user_unset!"
					password = findProperty("ossrhPassword") ?: "ossrh_pass_unset!"
				}
			}
		}
		
		// IntelliJ adjustments
		idea {
			module {
				// Make testFixtures as part of tests so that in search and
				// otherwise they appear as such
				testSourceDirs += project.projectDir.toPath().resolve("src")
					.resolve("testFixtures").resolve("java").toFile()
				testResourceDirs += project.projectDir.toPath().resolve("src")
					.resolve("testFixtures").resolve("resources").toFile()
			}
		}
	}
	
	// Signing publications
	signing {
		required {
			false
		}
		
		// Load key into memory and the password
		def signingKeyId = findProperty("signingKeyId")
		def signingPassword = findProperty("signingPassword")
		
		def signingKeyBase64 = findProperty("signingKey")
		def signingKey = (signingKeyBase64 == null ? null :
			new String(Base64.getMimeDecoder()
				.decode(signingKeyBase64.toString()), "utf-8"))
		
		// Use in memory key signing
		useInMemoryPgpKeys(/*signingKeyId,*/ signingKey, signingPassword)
		
		// The default Maven release becomes signed
		sign publishing.publications.maven
	}
}

// Properties for every sub-project, except for cldc-compact as it is special
configure(subprojects
	- project(":modules:cldc-compact")) {
	apply plugin: "java-library"

	// All projects use the base classpath
    java {
		// Only use SquirrelJME's boot classes, not the system SDK
		Project cldcCompactProject = project(":modules:cldc-compact")
		compileJava.options.bootstrapClasspath = project.objects.
			fileCollection().from(cldcCompactProject.buildDir.toPath().
			resolve("classes").resolve("java").resolve("main")).getAsFileTree()

		// Copy to JavaDoc
		javadoc.options.bootClasspath = compileJava.options.bootstrapClasspath
			.collect()
    }

	dependencies {
		// All projects depend on the Compact CLDC Library
		api project(":modules:cldc-compact")
	}
}
