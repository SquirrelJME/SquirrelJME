import java.nio.file.Files
import java.nio.file.StandardOpenOption

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'cc.squirreljme.plugin.general'

group = "cc.squirreljme"
description = "SquirrelJME is a Java ME 8 Virtual Machine for embedded " +
	"and Internet of Things devices. It has the ultimate goal of being " +
	"99.9% compatible with the Java ME standard."
version = squirreljmeVersion

// IntelliJ Configuration (because the root project is a bit different)
idea
{
	module
	{
		// Use the proper name for this module
		name = "SquirrelJME"

		// Exclude these directories so IntelliJ does not pick these up
		// in inspections and builds
		excludeDirs += file(".circleci")
		excludeDirs += file(".fossil-settings")
		excludeDirs += file(".github")
		excludeDirs += file(".idea")
		excludeDirs += file(".vscode")
		excludeDirs += file(".settings")
		excludeDirs += file("assets")
		excludeDirs += file("config")
		excludeDirs += file("gradle")
		excludeDirs += file("utils-dev")
		
		// These are auto-generated by Fossil and should be ignored
		excludeDirs += file("manifest")
		excludeDirs += file("manifest.uuid")
		
		// RatufaCoat files
		excludeDirs += file("ratufacoat/build")
		excludeDirs += file("ratufacoat/cmake-build-debug")
		excludeDirs += file("ratufacoat/cmake-build-release")
		excludeDirs += file("ratufacoat/.sample")
		
		// IntelliJ's own dependency matrix output (in "out")
		project.allprojects.each() { Project subProj ->
			excludeDirs += subProj.projectDir.toPath().resolve("out").toFile()
			
			// Eclipse Junk
			excludeDirs += subProj.projectDir.toPath().resolve(".settings").toFile()
			excludeDirs += subProj.projectDir.toPath().resolve("bin").toFile()
		}
	}
}

allprojects {
	apply plugin: 'eclipse'
	
	repositories
	{
		mavenCentral()
	}
	
	// Eclipse IDE
	plugins.withType(JavaPlugin) {
		def settingsDir = projectDir.toPath().resolve(".settings")
		def buildShipPrefs = settingsDir.resolve("org.eclipse.buildship.core.prefs")
		def pathToRoot = projectDir.toPath().relativize(rootDir.toPath())
		
		// Clean fix
		task cleanEclipseFixBuild {
			group "squirreljme"
			description "Cleans up after build fixes."
			
			doFirst {
				// Just delete the buildship preferences
				Files.deleteIfExists(buildShipPrefs)
			}
		}
		
		// Fix build
		task eclipseFixBuild {
			group "squirreljme"
			description "Fixes Eclipse build due to missing expected files."
			
			// If clean and such is ran, this must always be followed by it
			// since we could accidentally destroy it
			mustRunAfter cleanEclipseFixBuild, cleanEclipseJdt
			
			doFirst {
				// Setup settings directory first
				Files.createDirectories(settingsDir)
				
				// Write missing Eclipse file
				Files.write(
					buildShipPrefs,
					Arrays.asList(
						"connection.project.dir=" + pathToRoot,
						"eclipse.preferences.version=1"),
					StandardOpenOption.CREATE,
					StandardOpenOption.WRITE,
					StandardOpenOption.TRUNCATE_EXISTING)
			}
		}
		
		// Fix for cyclic dependencies
		eclipse.jdt {
			// We are a Java 8 project
			sourceCompatibility = 1.8
			targetCompatibility = 1.8
			
			// Fix for Eclipse and VSCode breaking on "circular" dependencies
			file.withProperties { properties ->
				properties["org.eclipse.jdt.core.builder.invalidClasspath"] = "warning"
				properties["org.eclipse.jdt.core.circularClasspath"] = "warning"
				properties["org.eclipse.jdt.core.classpath.outputOverlappingAnotherSource"] = "warning"
			}
		}
		
		eclipseJdt.finalizedBy(eclipseFixBuild)
		cleanEclipseJdt.finalizedBy(cleanEclipseFixBuild)
	}
}

// Generic root clean task, does nothing by default and just depends on
// others
tasks.register('clean') {
}
